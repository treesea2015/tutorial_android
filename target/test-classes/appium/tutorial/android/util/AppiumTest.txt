package appium.tutorial.android.util;

import com.saucelabs.common.SauceOnDemandAuthentication;
import com.saucelabs.common.SauceOnDemandSessionIdProvider;
import com.saucelabs.saucerest.SauceREST;
import io.appium.java_client.android.AndroidDriver;
import org.apache.commons.logging.LogFactory;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.File;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static appium.tutorial.android.util.AppiumHelpers.driver;

public class AppiumTest implements SauceOnDemandSessionIdProvider {

/*	static {
		// Disable annoying cookie warnings.
		// WARNING: Invalid cookie header
		LogFactory.getFactory().setAttribute("org.apache.commons.logging.Log",
				"org.apache.commons.logging.impl.NoOpLog");
	}

	private Logger logger = LoggerFactory.getLogger(AppiumTest.class);

	/** wait wraps Helpers.wait **/
	public static WebElement wait(By locator) {
		return AppiumHelpers.waitElement(locator);
	}

	private boolean runOnSauce = System.getProperty("sauce") != null;

	/**
	 * Authenticate to Sauce with environment variables SAUCE_USER_NAME and
	 * SAUCE_API_KEY
	 **/
	private SauceOnDemandAuthentication auth = new SauceOnDemandAuthentication();

	/** Report pass/fail to Sauce Labs **/
	// false to silence Sauce connect messages.
	/*
	 * public @Rule SauceOnDemandTestWatcher reportToSauce = new
	 * SauceOnDemandTestWatcher(this, auth, false);
	 * 
	 * @Rule public TestRule printTests = new TestWatcher() { protected void
	 * starting(Description description) { logger.info("  test: " +
	 * description.getMethodName()); }
	 * 
	 * protected void finished(Description description) { final String session =
	 * getSessionId();
	 * 
	 * if (session != null) { logger.info(" " + "https://saucelabs.com/tests/" +
	 * session); } else { logger.info("null"); } } };
	 */

	private String sessionId;

	/** Keep the same date prefix to identify job sets. **/
	private static Date date = new Date();

	/** Run before each test **/

	public void setUp() throws Exception {
		DesiredCapabilities capabilities = new DesiredCapabilities();
		capabilities.setCapability("appium-version", "1.1.0");
		capabilities.setCapability("platformName", "Android");
		capabilities.setCapability("deviceName", "Android");
		capabilities.setCapability("platformVersion", "4.3");

		// Set job name on Sauce Labs
		capabilities.setCapability("name", "Java Android tutorial " + date);
		String userDir = System.getProperty("user.dir");

		URL serverAddress;
		String localApp = "src/test/resources/apps/weixin_540_debug.apk";
		if (runOnSauce) {
			String user = auth.getUsername();
			String key = auth.getAccessKey();
			// Upload app to Sauce Labs
			SauceREST rest = new SauceREST(user, key);

			rest.uploadFile(new File(userDir, localApp), localApp);

			capabilities.setCapability("app", "sauce-storage:" + localApp);
			serverAddress = new URL("http://" + user + ":" + key
					+ "@ondemand.saucelabs.com:80/wd/hub");
			driver = new AndroidDriver(serverAddress, capabilities);
		} else {
			String appPath = Paths.get(userDir, localApp).toAbsolutePath()
					.toString();
			capabilities.setCapability("app", appPath);
			serverAddress = new URL("http://127.0.0.1:4723/wd/hub");
			driver = new AndroidDriver(serverAddress, capabilities);
		}

		sessionId = driver.getSessionId().toString();

		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		AppiumHelpers.init(driver, serverAddress);
	}

	/** Run after each test **/

	public void tearDown() throws Exception {
		if (driver != null)
			driver.quit();
	}

	/**
	 * If we're not on Sauce then return null otherwise SauceOnDemandTestWatcher
	 * will error.
	 **/
	public String getSessionId() {
		return runOnSauce ? sessionId : null;
	}*/
}